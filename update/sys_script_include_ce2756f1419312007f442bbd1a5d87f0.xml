<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_fitbit.fitbitUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>used to call fitbit REST api and handle results</description>
        <name>fitbitUtils</name>
        <script><![CDATA[var fitbitUtils = Class.create();
fitbitUtils.prototype = {
    initialize: function() {},
    getSteps: function(startDate, endDate) {
        try {
            var r = new sn_ws.RESTMessageV2('x_fitbit.Fitbit', 'getSteps');
            r.setStringParameterNoEscape('end-date', endDate);
            r.setStringParameterNoEscape('base-date', startDate);

            //override authentication profile 
            //authentication type ='basic'/ 'oauth2'
            //r.setAuthenticationProfile(authentication type, profile name);

            //set a MID server name if one wants to run the message on MID
            //r.setMIDServer('MY_MID_SERVER');

            //if the message is configured to communicate through ECC queue, either
            //by setting a MID server or calling executeAsync, one needs to set skip_sensor
            //to true. Otherwise, one may get an intermittent error that the response body is null
            //r.setEccParameter('skip_sensor', true);

            var response = r.execute();
            var responseBody = response.getBody();
			var responseObj = global.JSON.parse(responseBody);
			var steps = responseObj['activities-steps'];
            for (x in steps) {
                var gr = new GlideRecord('x_fitbit_fitbit_steps_import');
                gr.initialize();
                gr.u_value = steps[x].value.toString();
                gr.u_date = steps[x].dateTime.toString();
                gr.insert();

            }
            var httpStatus = response.getStatusCode();
        } catch (ex) {
            var message = ex.message;
        }
    },

    /*****************************************************************
     * Function will walk an object properties
     * if property name matches the table feild.
     * is set the field to the value
     ******************************************************************
     * tableName - Name of table to add row
     * obj  - and object to write to row fields
     *******************************************************************/

    addrow: function(tableName, obj) {
        var grTbl = new GlideRecord(tableName);
        grTbl.initialize();
        for (var field in obj) {
            var fldLc = field.toLowerCase();
            //gs.info(fldLc  + " : " + obj[field] + " isvalid - " + grFB.isValidField(fldLc));
            if (grTbl.isValidField(fldLc)) {

                grTbl[fldLc] = obj[field];
            }
        }
        grTbl.insert();
    },

    type: 'fitbitUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-05-11 00:35:36</sys_created_on>
        <sys_id>ce2756f1419312007f442bbd1a5d87f0</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>fitbitUtils</sys_name>
        <sys_package display_value="fitbit" source="x_fitbit">116b4c00781312007f442fb9b8ed6ee0</sys_package>
        <sys_policy/>
        <sys_scope display_value="fitbit">116b4c00781312007f442fb9b8ed6ee0</sys_scope>
        <sys_update_name>sys_script_include_ce2756f1419312007f442bbd1a5d87f0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-01-02 03:35:39</sys_updated_on>
    </sys_script_include>
</record_update>
